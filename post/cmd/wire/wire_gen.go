// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package wire

import (
	mongo2 "github.com/cshong0618/haruka/post/internal/repository/mongo"
	post2 "github.com/cshong0618/haruka/post/internal/repository/post"
	"github.com/cshong0618/haruka/post/pkg/domain/post"
	"github.com/cshong0618/haruka/post/pkg/usecase"
	"github.com/google/wire"
	"github.com/nats-io/nats.go"
	"go.mongodb.org/mongo-driver/mongo"
	"os"
)

// Injectors from wire.go:

func InitPostService() *usecase.PostService {
	client := initMongo()
	eventSource := initPostRepository(client)
	postService := usecase.NewPostService(eventSource)
	return postService
}

func GetNats() *nats.Conn {
	conn := initNats()
	return conn
}

// wire.go:

var wireSet = wire.NewSet(
	initNats,
)

var depSet = wire.NewSet(
	initMongo,
	initPostRepository, wire.Bind(new(post.Repository), new(*post2.EventSource)), usecase.NewPostService,
)

var _nats *nats.Conn

func initMongo() *mongo.Client {
	mongoURL := os.Getenv("MONGO_URL")
	return mongo2.InitMongo(mongoURL)
}

func initPostRepository(mongoClient *mongo.Client) *post2.EventSource {
	return post2.NewEventSource(mongoClient, "post", "eventCommands")
}

func initNats() *nats.Conn {
	if _nats != nil {
		return _nats
	}

	uri := os.Getenv("NATS_URI")
	nc, err := nats.Connect(uri, nats.MaxReconnects(10))

	if err != nil {
		panic(err)
	}

	_nats = nc
	return _nats
}
